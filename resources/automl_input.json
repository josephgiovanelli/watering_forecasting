{
    "prototype": {
        "choice": [
            "normalization_features_imputation_classification",
            "normalization_imputation_features_classification",
            "features_imputation_normalization_classification",
            "features_normalization_imputation_classification",
            "imputation_normalization_features_classification",
            "imputation_features_normalization_classification"
        ]
    },
    "normalization": {
        "choice": [
            {
                "type": "FunctionTransformer"
            },
            {
                "type": "PowerTransformer"
            },
            {
                "type": "RobustScaler",
                "with_centering": {
                    "choice": [
                        true,
                        false
                    ]
                },
                "with_scaling": {
                    "choice": [
                        true,
                        false
                    ]
                }
            },
            {
                "type": "StandardScaler",
                "with_mean": {
                    "choice": [
                        true,
                        false
                    ]
                },
                "with_std": {
                    "choice": [
                        true,
                        false
                    ]
                }
            },
            {
                "type": "MinMaxScaler"
            }
        ]
    },
    "features": {
        "choice": [
            {
                "type": "FunctionTransformer"
            },
            {
                "type": "SelectKBest",
                "k": {
                    "randint": [
                        1,
                        10
                    ]
                }
            },
            {
                "type": "PCA",
                "n_components": {
                    "randint": [
                        1,
                        8
                    ]
                }
            }
        ]
    },
    "imputation": {
        "choice": [
            {
                "type": "FunctionTransformer"
            },
            {
                "type": "SimpleImputer",
                "strategy": {
                    "choice": [
                        "most_frequent",
                        "constant"
                    ]
                }
            },
            {
                "type": "IterativeImputer",
                "initial_strategy": {
                    "choice": [
                        "most_frequent",
                        "constant"
                    ]
                },
                "imputation_order": {
                    "choice": [
                        "ascending",
                        "descending",
                        "roman",
                        "arabic",
                        "random"
                    ]
                }
            }
        ]
    },
    "classification": {
        "choice": [
            {
                "type": "KNeighborsClassifier",
                "n_neighbors": {
                    "randint": [
                        3,
                        20
                    ]
                },
                "weights": {
                    "choice": [
                        "uniform",
                        "distance"
                    ]
                },
                "metric": {
                    "choice": [
                        "minkowski",
                        "euclidean",
                        "manhattan"
                    ]
                }
            },
            {
                "type": "MLPClassifier",
                "n_hidden_layers": {
                    "choice": [
                        1,
                        5,
                        10,
                        25
                    ]
                },
                "n_neurons": {
                    "choice": [
                        5,
                        10,
                        25,
                        50,
                        100
                    ]
                },
                "activation": {
                    "choice": [
                        "logistic",
                        "tanh",
                        "relu"
                    ]
                },
                "solver": {
                    "choice": [
                        "lbfgs",
                        "sgd",
                        "adam"
                    ]
                },
                "alpha": {
                    "choice": [
                        0.0001,
                        0.001,
                        0.01,
                        0.00001
                    ]
                },
                "learning_rate": {
                    "choice": [
                        "constant",
                        "invscaling",
                        "adaptive"
                    ]
                }
            },
            {
                "type": "SVC",
                "'C'": {
                    "choice": [
                        0.001,
                        0.005,
                        0.01,
                        0.05,
                        0.1,
                        0.5,
                        1,
                        5
                    ]
                },
                "kernel": {
                    "choice": [
                        "linear",
                        "poly",
                        "rbf",
                        "sigmoid"
                    ]
                },
                "degree": {
                    "choice": [
                        2,
                        3,
                        4,
                        5,
                        10,
                        20
                    ]
                },
                "gamma": {
                    "choice": [
                        "auto",
                        "scale"
                    ]
                },
                "shrinking": {
                    "choice": [
                        true,
                        false
                    ]
                }
            },
            {
                "type": "RandomForestClassifier",
                "n_estimators": {
                    "choice": [
                        10,
                        25,
                        50,
                        75,
                        100
                    ]
                },
                "max_depth": {
                    "randint": [
                        1,
                        5
                    ]
                },
                "max_features": {
                    "randint": [
                        1,
                        4
                    ]
                },
                "min_samples_split": {
                    "randint": [
                        2,
                        6
                    ]
                },
                "max_leaf_nodes": {
                    "randint": [
                        2,
                        6
                    ]
                },
                "bootstrap": {
                    "choice": [
                        true,
                        false
                    ]
                },
                "criterion": {
                    "choice": [
                        "gini",
                        "entropy"
                    ]
                }
            },
            {
                "type": "AdaBoostClassifier",
                "n_estimators": {
                    "choice": [
                        10,
                        50,
                        100,
                        500
                    ]
                },
                "learning_rate": {
                    "choice": [
                        0.0001,
                        0.001,
                        0.01,
                        0.1,
                        1.0
                    ]
                }
            }
        ]
    }
}